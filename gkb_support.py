#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0P
#  in conjunction with Tcl version 8.6
#    Dec 21, 2023 12:23:46 PM CST  platform: Linux
#    Dec 21, 2023 01:41:54 PM CST  platform: Linux
#    Dec 21, 2023 03:02:29 PM CST  platform: Linux
#    Dec 21, 2023 03:05:28 PM CST  platform: Linux
#    Dec 21, 2023 03:15:41 PM CST  platform: Linux
#    Dec 21, 2023 04:26:21 PM CST  platform: Linux
#    Dec 21, 2023 05:54:07 PM CST  platform: Linux
#    Dec 21, 2023 06:02:37 PM CST  platform: Linux
#    Dec 21, 2023 06:26:16 PM CST  platform: Linux
#    Dec 22, 2023 03:15:34 AM CST  platform: Linux
#    Dec 22, 2023 03:19:30 AM CST  platform: Linux
#    Dec 22, 2023 03:39:28 AM CST  platform: Linux
#    Dec 23, 2023 07:58:10 AM CST  platform: Linux
#    Jan 08, 2024 05:55:15 AM CST  platform: Linux
#    Jan 09, 2024 05:10:09 AM CST  platform: Linux

# ======================================================
#                   gkb_support.py
#  ------------------------------------------------------
# Created for PAGE and PAGE users.
# Written by G.D. Walters
# Copyright Â© 2023, 2024 by G.D. Walters
# This source code is released under the MIT License
# ======================================================
#               STILL TO DO - 01/09/2024
# ------------------------------------------------------
# Need Testing - Update existing record(s) support
# * Manage FormHider better
# * Multiple return records better support
# * Better debug print support
# * Move ALL SQL queries into functions
# In Progress - Add sphinx stuff to database
# * support delete topic
# * Documentation
# * After new entry, update number of records, framesql, rerun query
# ======================================================
#                    Change Log
# ------------------------------------------------------
# 0.1.0 - Initial coding
# 0.1.1 - 01/08/2024
#       Added popup2 for Listbox2 (FrameSQL)
#       Started support for update existing Topics/keywords
#       Added support for enhanced Listbox
# 0.1.2 - 01/10/2024
#       Continued update existing topic/keywords logic
#       Edit Update and save function for info table completed.
#       Delete and update keywords completed
#       Database has 21 records now
# ======================================================
import sys
import os.path
import platform
import glob
import pprint
import sqlite3
import datetime
import shared
from dbutils import quote
import pprint

# ===============================================
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import font
import tkinter.messagebox as messagebox
from tkinter import simpledialog
from tkinter import colorchooser
from tkinter.filedialog import (
    askdirectory,
    askopenfilename,
    asksaveasfile,
    asksaveasfilename,
)
from tkinter.simpledialog import askfloat, askinteger, askstring

# ===============================================

import gkb

_debug = True  # False to eliminate debug printing from callback functions.
_debug2 = False
_debug3 = True
_debug4 = False
location = gkb._location
programName = "Greg's Knowledge Base"
version = "0.1.2"


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = gkb.Main(_top1)
    startup()
    root.mainloop()


def startup():
    global textbox
    textbox = _w1.Scrolledtext1
    setupDB()
    global timer_id
    timer_id = root.after(0, on_time_update)
    do_bindings()
    setup_listbox()
    show_environ_info()
    set_icon()
    setupAbout()
    shared.editInformation = []
    numrecs = queryCountUnique()
    titl = f"{programName} version {version} - Topics: {numrecs}"
    _top1.title(titl)
    on_btnSQLShow()
    _w1.msg2kwds.set("")
    # _w1.btnTemp.place_forget()
    _w1.btnRemove.configure(state=DISABLED)
    _w1.btnRemove_tooltip.configure(text="Remove Current record (currently DISABLED)")
    _w1.btnSQLDismiss.place_forget()
    _w1.FrameHider.lift()
    _w1.btnTopicEdit.config(state=DISABLED)
    centre_screen(1010, 754, True)


def do_bindings():
    # _w1.Scrolledlistbox1.bind("<<ListboxSelect>>", on_searchListboxSelect)
    create_listbox_bindings()
    # _w1.TCombobox1.bind("<<ComboboxSelected>>", lambda e: on_ComboSelect(e))
    _w1.TEntry1.bind("<KeyRelease>", lambda e: on_entryKeyPress(e))
    _w1.TEntry4.bind("<KeyRelease>", lambda e: on_queryTestEntryKeyPress(e))
    _w1.Scrolledtext1.bind("<Button-3>", lambda e: _w1.popup1(e, 1))
    _w1.Scrolledtext2.bind("<Button-3>", lambda e: _w1.popup1(e, 2))
    _w1.Scrolledtext3.bind("<Button-3>", lambda e: _w1.popup1(e, 3))
    _w1.Scrolledtext4.bind("<Button-3>", lambda e: _w1.popup1(e, 4))
    # _top1.bind("<Expose>", on_frameExpose("SQL"))
    # _w1.FrameEditor.bind("<Expose>", on_frameExpose("Edit"))
    # _w1.FrameAbout.bind("<Expose>", on_frameExpose("About"))


def on_frameExpose(which):
    print(which)
    if which == "SQL":
        print("SQL Frame exposed")
    elif which == "Edit":
        print("Edit Exposed")


def on_searchListboxSelect(e):
    print("Into on_searchListboxSelect")
    global searchrecs
    indx = _w1.Scrolledlistbox1.curselection()
    itm = _w1.Scrolledlistbox1.get(indx[0])
    # SelectedItem.set(f"Selected Item: {indx[0]} - {itm}")
    if _debug3:
        print(f"Selected Item: {indx[0]} - {itm}")
        print(f"{indx[0]=} - {itm=} - {searchrecs=}")
    _w1.Scrolledtext2.delete(1.0, END)
    # clear_textbox()
    # textbox.insert(1.0, searchrecs[indx[0]][3])
    _w1.Scrolledtext2.insert(1.0, searchrecs[indx[0]][3])
    # _w1.FrameMainText.lift()


def on_searchListboxSelect2(e):
    print("Into on_searchListboxSelect2")
    global searchrecs
    indx = _w1.Scrolledlistbox2.curselection()
    itm = _w1.Scrolledlistbox2.get(indx[0])
    # SelectedItem.set(f"Selected Item: {indx[0]} - {itm}")
    if _debug3:
        print(f"Selected Item: {indx[0]} - {itm}")
        print(f"{indx[0]=} - {itm=} - {searchrecs=}")
    clear_textbox()
    textbox.insert(1.0, searchrecs[indx[0]][3])
    # _w1.FrameMainText.lift()


def on_entryKeyPress(e):
    global debug
    if e.keysym == "Return":
        # do something here
        # dat = _w1.EntryData.get()
        # _w1.EntryDisplay.set(dat)
        on_keywordSearch()


def run_dummy_test():
    global connection, cursor
    global textbox
    sql = 'SELECT code FROM info WHERE topic like "%import%"'
    rtn = list(cursor.execute(sql))
    print(f"{rtn=}")
    print(f"{len(rtn)=}")
    txt = rtn[0][0]
    txt = txt.replace('"', "")
    clear_textbox()
    textbox.insert(1.0, txt)


def setupDB():
    databasename = os.path.join(location, "database", "gkb.db")
    open_database(databasename)


def open_database(dbname):
    global connection, cursor
    connection = sqlite3.Connection(dbname)
    cursor = connection.cursor()


def on_btnExit(*args):
    if _debug:
        print("gkb_support.on_btnExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


def on_btnTemp(*args):
    if _debug:
        print("gkb_support.on_btnTemp")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    run_dummy_test()


def on_time_update():
    # ======================================================
    # Callback function for the Time display
    # ======================================================
    global timer_id
    nowstring = f"{datetime.datetime.now():%X}"
    _w1.StatusTime.set(nowstring)
    timer_id = root.after(500, on_time_update)


def set_icon():
    # ======================================================
    # Sets the application icon...
    # ======================================================
    global progImagesPath
    img = os.path.join(location, "graphics", "ChubbyOwl.png")
    shared.p1 = tk.PhotoImage(file=img)
    root.tk.call("wm", "iconphoto", root._w, shared.p1)


# Shows information at the beginning of the program that could be helpful for troubleshooting
def show_environ_info():
    osVersion = platform.system()
    release = platform.release()
    platformversion = platform.version()
    pv = platform.python_version()
    print("=" * 35)
    print(f"Program name: {programName} {version}")
    print(f"System running {osVersion} {release}")
    print(f"Running under Python {pv}")
    print(f"Program path: {location}")
    print("=" * 35)


def on_keywordSearch(*args):
    if _debug:
        print("gkb_support.on_keywordSearch")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global searchrecs

    keywd = _w1.EntryKeyword.get()
    kwretn = queryKeyword_search(keywd)

    _w1.Scrolledtext2.delete(1.0, END)

    if len(kwretn) > 0:
        # keywords = get_keywords(keywd)
        # print(keywords)
        kwdquery = f'''SELECT info.pkid, info.topic, keywordsmain.KeywordText, info.code, keywords.idKeywords, keywords.KeywordsMain FROM info INNER JOIN keywords ON info.pkid = keywords.InfoMain INNER JOIN keywordsmain ON keywords.KeywordsMain = keywordsmain.idKeywordsMain WHERE topic LIKE "%{keywd}%"'''

        print(kwdquery)
        resp = cursor.execute(kwdquery)

    if len(kwretn) > 1:
        # _w1.FrameSearchResults.lift()
        numfound = len(kwretn)
        _w1.SearchResultsTitle.set(f"Search Results - {numfound} items found.")
        print(f"{kwretn}")
        lstitms = []
        _w1.Scrolledlistbox1.delete(0, tk.END)
        for rec in kwretn:
            itm = rec[1]
            recnum = rec[0]
            lstitms.append([itm, recnum])
            _w1.Scrolledlistbox1.insert("end", itm)
        searchrecs = kwretn
        _w1.FrameSearchResults.lift()
        # textbox.insert(1.0, kwretn[0][3])
        # _w1.FrameMainText.lift()
        # _w1.Scrolledtext2

    elif len(kwretn) == 1:
        clear_textbox
        _w1.Scrolledtext1.delete(1.0, END)
        textbox.insert(1.0, kwretn[0][3])
        _w1.FrameMainText.lift()
    else:
        titl = "No results"
        msg = "No matches found.  Try again."
        icon = messagebox.ERROR
        messagebox.showerror(titl, msg, parent=_top1, icon=icon)


def queryKeyword_search(keywd):
    kwsql = f'''SELECT
    info.pkid,
    info.topic,
    keywordsmain.KeywordText,
    info.code
FROM
    info
    INNER JOIN keywords
     ON info.pkid = keywords.InfoMain
    INNER JOIN keywordsmain
     ON keywords.KeywordsMain = keywordsmain.idKeywordsMain
WHERE
    KeywordText LIKE "%{keywd}%"'''

    print(f"Search for {keywd}")
    kwretn = list(cursor.execute(kwsql))
    print(len(kwretn))
    return kwretn


def get_keywords(kwd):
    global connection, cursor
    kwdquery = f'''SELECT info.pkid, info.topic, keywordsmain.KeywordText, info.code, keywords.idKeywords, keywords.KeywordsMain FROM info INNER JOIN keywords ON info.pkid = keywords.InfoMain INNER JOIN keywordsmain ON keywords.KeywordsMain = keywordsmain.idKeywordsMain WHERE topic LIKE "%{kwd}%"'''

    print(kwdquery)
    resp = cursor.execute(kwdquery)
    return resp


def clear_textbox():
    textbox.delete(1.0, END)


def on_btnAdd(*args):
    if _debug:
        print("gkb_support.on_btnAdd")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.EditorMode.set("New Topic")
    _w1.FrameEditor.lift()
    # Clear the two Entry widgets
    _w1.EntTopic.set("")
    _w1.EntryKeywords1.set("")
    # Clear the Scrolledtext widget
    _w1.Scrolledtext3.delete(1.0, END)


def on_btnHelp(*args):
    if _debug:
        print("gkb_support.on_btnHelp")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    titl = programName
    msg = (
        "Sorry, but Help is currently under development and not available at this time."
    )
    ico = messagebox.INFO
    messagebox.showinfo(titl, msg, parent=_top1, icon=ico)
    # _w1.FrameSQL.lift()


def on_btnRemove(*args):
    if _debug:
        print("gkb_support.on_btnRemove")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()


def on_btnAbout(*args):
    if _debug:
        print("gkb_support.on_btnAbout")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.FrameHider.lift()
    _w1.FrameAbout.lift()


def setupAbout():
    _w1.Message1.configure(
        text="""\n\n\nGreg's Knowledge Base

A database repository of some of my most helpful code snippets for PAGE and Python projects.

Project started 21 December, 2023

Written by Gregory Walters.

Copyright Â© 2023,2024 by Gregory Walters"""
    )


def on_btnAboutDismiss(*args):
    if _debug:
        print("gkb_support.on_btnAboutDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # _w1.FrameMainText.lift()
    _w1.FrameSQL.lift()


def on_btnEditSave(*args):
    if _debug:
        print("gkb_support.on_btnEditSave")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # Get Topic,Keywords,Code
    global currentID
    topic = quote(_w1.EntTopic.get())
    keywordraw = _w1.EntryKeywords1.get()
    code = _w1.Scrolledtext3.get(1.0, END)
    if _w1.EditorMode.get() == "Topic Edit":
        print("Edit Mode")
        sql_update_info(currentID, topic, code, keywordraw)
    else:
        print("New Topic mode")
        # topic = quote(_w1.EntTopic.get())
        # keywordraw = _w1.EntryKeywords1.get()
        # code = _w1.Scrolledtext3.get(1.0, END)
        # convert keywords to list
        # keywordlist = keywordraw.split(",")
        keywordlist = [s.strip() for s in keywordraw.split(",") if s]
        print(f"{keywordlist=}")

        # Prep the Code
        codedata = quote(code)
        print(f"{code=}")
        insert1sql = (
            f"INSERT INTO info (topic, code, active) VALUES ({topic},{codedata},1)"
        )
        print(f"{insert1sql=}")
        cursor.execute(insert1sql)
        connection.commit()
        lastInforowid = cursor.lastrowid
        for key in keywordlist:
            keycreatesql = (
                f"INSERT INTO keywordsmain (KeywordText) VALUES ({quote(key)})"
            )
            print(f"{keycreatesql=}")
            cursor.execute(keycreatesql)
            connection.commit()
            lastKWrowid = cursor.lastrowid
            linksql = f"INSERT INTO keywords (InfoMain,KeywordsMain) VALUES ({lastInforowid},{lastKWrowid})"
            print(f"{linksql=}")
            cursor.execute(linksql)
            connection.commit()
        print("DONE!")
        titl = "Edit Save"
        msg = "Save completed"
        ico = messagebox.INFO
        messagebox.showinfo(titl, msg, parent=_top1, icon=ico)
        _w1.Scrolledtext3.delete(1.0, END)
        _w1.EntTopic.set("")
        _w1.EntryKeywords1.set("")


def on_btnTopicEdit(*args):
    if _debug:
        print("gkb_support.on_btnTopicEdit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.EditorMode.set("Topic Edit")

    # Clear the two Entry widgets
    _w1.EntTopic.set("")

    _w1.EntryKeywords1.set("")
    # Clear the Scrolledtext widget
    _w1.Scrolledtext3.delete(1.0, END)
    _w1.FrameEditor.lift()


def on_popClear(*args):
    if _debug:
        print("gkb_support.on_popClear")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    if args[0] == 1:
        _w1.Scrolledtext1.delete(1.0, END)
    elif args[0] == 2:
        _w1.Scrolledtext2.delete(1.0, END)
    elif args[0] == 3:
        _w1.Scrolledtext3.delete(1.0, END)
    elif args[0] == 4:
        _w1.Scrolledtext4.delete(1.0, END)


def on_popCopy(*args):
    if _debug:
        print("gkb_support.on_popCopy")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    if args[0] == 1:
        root.clipboard_clear()  # clear clipboard contents
        sel_start, sel_end = _w1.Scrolledtext1.tag_ranges("sel")
        if sel_start and sel_end:
            root.clipboard_append(_w1.Scrolledtext1.get(sel_start, sel_end))
        else:
            root.clipboard_append(_w1.Scrolledtext1.get(1.0, END))
    if args[0] == 2:
        root.clipboard_clear()  # clear clipboard contents
        sel_start, sel_end = _w1.Scrolledtext2.tag_ranges("sel")
        if sel_start and sel_end:
            root.clipboard_append(_w1.Scrolledtext2.get(sel_start, sel_end))
        else:
            root.clipboard_append(_w1.Scrolledtext2.get(1.0, END))
    if args[0] == 3:
        root.clipboard_clear()  # clear clipboard contents
        sel_start, sel_end = _w1.Scrolledtext3.tag_ranges("sel")
        if sel_start and sel_end:
            root.clipboard_append(_w1.Scrolledtext3.get(sel_start, sel_end))
        else:
            root.clipboard_append(_w1.Scrolledtext3.get(1.0, END))

    if args[0] == 4:
        root.clipboard_clear()  # clear clipboard contents
        sel_start, sel_end = _w1.Scrolledtext4.tag_ranges("sel")
        if _debug3:
            print(f"{sel_start=} - {sel_end=}")
        if sel_start and sel_end:
            root.clipboard_append(_w1.Scrolledtext4.get(sel_start, sel_end))
        else:
            root.clipboard_append(_w1.Scrolledtext4.get(1.0, END))


def on_popPaste(*args):
    if _debug:
        print("gkb_support.on_popPaste")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    dat = root.clipboard_get()
    if args[0] == 1:
        _w1.Scrolledtext1.insert(1.0, dat)
        # _w1.EntryDisplay.set(dat)
    elif args[0] == 2:
        _w1.Scrolledtext2.insert(1.0, dat)
    elif args[0] == 3:
        _w1.Scrolledtext3.insert(1.0, dat)
    elif args[0] == 4:
        _w1.Scrolledtext4.insert(1.0, dat)
    else:
        pass


def on_btnSearchDone(*args):
    if _debug:
        print("gkb_support.on_btnSearchDone")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # _w1.FrameMainText.lift()
    _w1.FrameSQL.lift()


def on_btnSQLDismiss(*args):
    if _debug:
        print("gkb_support.on_btnSQLDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.msg2kwds.set("")
    _w1.FrameHider.lift()
    _w1.FrameSQL.lift()
    # _w1.FrameMainText.lift()


def on_btnSQLShow(*args):
    if _debug:
        print("gkb_support.on_btnSQLShow")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.FrameSQL.lift()
    query = "SELECT topic,pkid FROM info where active=1"
    recs = list(cursor.execute(query))
    global topics
    topics = recs
    # sqlList = ["keyword_search", "get_keywords"]
    delete_SQL_ListItems()
    for itm in recs:
        _w1.Scrolledlistbox2.insert("end", itm[0])
    _w1.Scrolledlistbox2.bind("<<ListboxSelect>>", on_SQLlistboxSelect)
    # queryGetKeywords()


# Listbox callback...


def on_SQLlistboxSelect(*args):
    if _debug3:
        print("gkb_support.on_SQLlistboxSelect")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    indx = _w1.Scrolledlistbox2.curselection()
    itm = _w1.Scrolledlistbox2.get(indx[0])
    # SelectedItem.set(f"Selected Item: {indx[0]} - {itm}")
    if _debug3:
        print(f"Selected Item: {indx[0]} - {itm}")
    shared.sqlQuerySelected = itm
    global topics
    query1 = f"SELECT * FROM info WHERE pkid = {topics[indx[0]][1]}"
    # print(query1)
    retn = list(cursor.execute(query1))
    # print(retn)
    _w1.Scrolledtext4.delete(1.0, END)
    _w1.Scrolledtext4.insert(1.0, retn[0][2])
    kwds = queryGetKeywords(topics[indx[0]][1])
    tmp = ""
    tmp = ", ".join(kwds)

    _w1.FrameKeywords.lift()
    _w1.msg2kwds.set(tmp)


def delete_SQL_ListItems():
    if _debug:
        print("gkb_support.delete_SQL_Listitems")
        sys.stdout.flush()
    _w1.Scrolledlistbox2.delete(0, tk.END)


def on_btnSQLGo(*args):
    if _debug:
        print("gkb_support.on_btnSQLGo")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # queryToRun = shared.sqlQuerySelected
    # print(f"{queryToRun=}")
    queryToRun = "keyword_search"
    _w1.Scrolledtext4.delete(1.0, END)
    queryparm = _w1.ParamSQL.get()
    if queryToRun == "keyword_search":
        result = list(queryKeyword_search(queryparm))
        if result:
            dat = pprint.pformat(result)
            _w1.Scrolledtext4.insert(1.0, dat)
    elif queryToRun == "get_keywords":
        result = list(get_keywords(queryparm))
        if result:
            dat = pprint.pformat(result)
            _w1.Scrolledtext4.insert(1.0, dat)


def on_queryTestEntryKeyPress(e):
    global debug
    if e.keysym == "Return":
        # do something here
        # dat = _w1.EntryData.get()
        # _w1.EntryDisplay.set(dat)
        on_btnSQLGo()


def on_frameEditDismiss(*args):
    if _debug:
        print("gkb_support.on_frameEditDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.FrameSQL.lift()


# ===========================================
#   Latest centre_screen function
# ===========================================


def centre_screen(wid, hei, testing=False):
    # ===================================================
    # This will centre the Toplevel form in the monitor.
    #     If used in a dual monitor situation, this would
    #     mean that the Toplevel form will centre within a
    #     screen width of (primaryMonitor) + (secondaryMonitor)
    # ---------------------------------------------------
    # Written by G.D. Walters 20 November, 2023
    # ===================================================
    # version 0.9
    # ===================================================
    # Parameters:
    #    Inputs:
    #        wid: integer - Toplevel width
    #        hei: integer - Toplevel height
    #        testing: boolean - Overrides the system width and height.
    #             change the values to the width/height of your primary
    #             monitor.
    #    Returns:
    #        Nothing
    #    Example:
    #        centre_screen(880, 629, 1)
    # ===================================================
    if testing == False:
        ws = root.winfo_screenwidth()
        hs = root.winfo_screenheight()
    else:
        # Override python tkinter winfo_screenwidth/winfo_screenheight
        # set to the values of your monitor to test.  This could be either
        # the primar or secondary monitor screen width and height
        ws = 2560
        hs = 1440
    x = (ws / 2) - (wid / 2)
    y = (hs / 2) - (hei / 2)
    root.geometry("%dx%d+%d+%d" % (wid, hei, x, y))


def queryGetKeywords(id):
    sql = f"""SELECT
    info.pkid,
    keywordsmain.KeywordText
FROM
    keywords
    INNER JOIN keywordsmain
     ON keywords.KeywordsMain = keywordsmain.idKeywordsMain
    INNER JOIN info
     ON keywords.InfoMain = info.pkid
WHERE
        info.active=1 and info.pkid={id}"""
    rtn = list(cursor.execute(sql))
    lst = []
    if rtn:
        # print(len(rtn))
        for rec in rtn:
            # print(rec)
            lst.append(rec[1])
    return lst


def queryCountUnique():
    sql = """SELECT
    count(*) as count
FROM
    info
where info.active=1"""
    reccount = list(cursor.execute(sql))
    if _debug3:
        print(reccount[0])
    return reccount[0][0]


def on_btnMainDismiss(*args):
    if _debug:
        print("gkb_support.on_btnMainDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.FrameSQL.lift()


# ===================================================
# Enhanced Listbox support
# ===================================================


def create_listbox_bindings():
    print("Into create_listbox_bindings")
    global listbox, listbox2
    # ===================================================
    # Listbox is located on the search frame
    # Listbox2 is located on the SQL frame
    # ===================================================
    listbox = _w1.Scrolledlistbox1
    listbox.bind("<<ListboxSelect>>", on_searchListboxSelect)
    listbox.bind("<Motion>", on_lbmotion)
    listbox.bind("<Button-3>", lbBtn3)
    listbox2 = _w1.Scrolledlistbox2
    listbox2.bind("<<ListboxSelect>>", on_searchListboxSelect2)
    listbox2.bind("<Motion>", on_lbmotion)
    listbox2.bind("<Button-3>", _w1.popup2)


def setup_listbox():
    print("Into setup_listbox")
    global listbox, listbox2
    # ===================================================
    # Listbox is located on the search frame
    # Listbox2 is located on the SQL frame
    # ===================================================
    listbox.configure(background="#a1a1a1")
    listbox.configure(selectbackground="seagreen2")
    listbox.configure(selectborderwidth=2)
    listbox.configure(takefocus=0)
    listbox2.configure(background="white")
    listbox2.configure(selectbackground="seagreen2")
    listbox2.configure(selectborderwidth=2)
    listbox2.configure(takefocus=0)
    cntr = 0

    # for version in widgetlist:
    #     listbox.insert("end", version)
    #     listbox.itemconfigure(cntr, background="skyblue2")
    #     cntr += 1

    # versionlist = list(listbox.get(0, END))


# Captures mouse motion within the Listbox widget
def on_lbmotion(event):
    global mousex, mousey
    x, y = event.x, event.y
    mousex = x
    mousey = y


# Along with lbmotion, allows a <Button-3> to "semi-select" an item in the
# Listbox
def lbBtn3(*args):
    global textbox, listbox
    # ===================================================
    # Listbox is located on the search frame
    # Listbox2 is located on the SQL frame
    # ===================================================
    print("Into lbBtn3")
    if _debug:
        print("Into function something")
        print(args)
        for arg in args:
            print(f"   {arg}")
    global mousex, mousey
    X = listbox.winfo_pointerx()
    y = listbox.winfo_pointery()
    pos = listbox.nearest(mousey)
    indx = listbox.curselection()
    itm = listbox.get(pos)
    tagname = itm
    print(f"<Button-3> on {tagname} at position {indx}")
    if listbox.itemcget(pos, "background") == "antiquewhite3":
        listbox.itemconfigure(pos, background="skyblue2")
    else:
        listbox.itemconfigure(pos, background="antiquewhite3")


def lbBtn3_2(*args):
    global textbox, listbox2
    # ===================================================
    # Listbox is located on the search frame
    # Listbox2 is located on the SQL frame
    # ===================================================
    print("Into lbBtn3_2")
    if _debug:
        print("Into function something")
        print(args)
        for arg in args:
            print(f"   {arg}")
    global mousex, mousey
    X = listbox2.winfo_pointerx()
    y = listbox2.winfo_pointery()
    pos = listbox2.nearest(mousey)
    indx = listbox2.curselection()
    itm = listbox2.get(pos)
    tagname = itm
    print(f"<Button-3> on {tagname} at position {indx}")
    if listbox2.itemcget(pos, "background") == "antiquewhite3":
        listbox2.itemconfigure(pos, background="skyblue2")
    else:
        listbox2.itemconfigure(pos, background="antiquewhite3")


# ===================================================
# END Enhanced Listbox suport
# ===================================================


def on_pop2CloseMenu(*args):
    if _debug:
        print("gkb_support.on_pop2CloseMenu")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()


def on_pop2DeleteTopic(*args):
    if _debug:
        print("gkb_support.on_pop2DeleteTopic")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global mousex, mousey
    X = listbox2.winfo_pointerx()
    y = listbox2.winfo_pointery()
    pos = listbox2.nearest(mousey)
    indx = listbox2.curselection()
    itm = listbox2.get(pos)
    topicName = itm
    titl = programName
    msg = f"You are about to delete {itm}. \nThis can not be undone.  \nAre you sure you want to do this?"
    ico = messagebox.QUESTION
    resp = messagebox.askyesno(titl, msg, parent=_top1, icon=ico)
    print(resp)
    if resp == True:
        pass
    else:
        pass


def on_pop2EditTopic(*args):
    if _debug:
        print("gkb_support.on_pop2EditTopic")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global mousex, mousey
    X = listbox2.winfo_pointerx()
    y = listbox2.winfo_pointery()
    pos = listbox2.nearest(mousey)
    indx = listbox2.curselection()
    itm = listbox2.get(pos)
    topicName = itm
    load_Editor(topicName)
    _w1.FrameEditor.lift()
    # if listbox2.itemcget(pos, "background") == "antiquewhite3":
    #     listbox2.itemconfigure(pos, background="skyblue2")
    # else:
    #     listbox2.itemconfigure(pos, background="antiquewhite3")
    # shared.editInformation = ["EditMode", topicName]


def load_Editor(topic):
    if _debug:
        print("Into load_Editor")
    print(f"{topic=}")
    sql = f"SELECT * FROM info WHERE topic = '{topic}'"
    if _debug:
        print(sql)

    recs = list(cursor.execute(sql))
    if _debug:
        print(f"{recs}")
    kwds = queryGetKeywords(recs[0][0])
    if _debug:
        print(f"{kwds=}")
    tmp = ""
    tmp = ", ".join(kwds)
    # Load the information into the FrameEditor Entry and ScrolledText
    global currentID
    currentID = recs[0][0]
    _w1.EntTopic.set(topic)
    _w1.EntryKeywords1.set(tmp)
    _w1.Scrolledtext3.delete(1.0, END)
    _w1.Scrolledtext3.insert(1.0, recs[0][2])
    _w1.EditorMode.set("Topic Edit")


def sql_update_info(currentID, topic, code, kwds):
    print(f"{currentID=}")
    print(f"{topic=}")
    print(f"{code=}")
    print(f"{kwds=}")
    updateinfosql = (
        f"UPDATE info set topic={topic},code={quote(code)} where pkid={currentID}"
    )
    # print(f"{updateinfosql=}")
    cursor.execute(updateinfosql)
    connection.commit()
    # STILL TO DO...
    deleteKwdSql = f"DELETE FROM keywords WHERE InfoMain = {currentID}"
    cursor.execute(deleteKwdSql)
    connection.commit()

    # Delete keywords for the currentID
    # Remove all records from keywords table where infoMain=currentID
    keywordlist = [s.strip() for s in kwds.split(",") if s]
    print(f"{kwds=}")
    print(f"{keywordlist=}")
    print("Now to write the keywords")
    # Insert keywords for the currentID
    for key in keywordlist:
        keycreatesql = f"INSERT INTO keywordsmain (KeywordText) VALUES ({quote(key)})"
        print(f"{keycreatesql=}")
        cursor.execute(keycreatesql)
        connection.commit()
        lastKWrowid = cursor.lastrowid
        linksql = f"INSERT INTO keywords (InfoMain,KeywordsMain) VALUES ({currentID},{lastKWrowid})"
        print(f"{linksql=}")
        cursor.execute(linksql)
        connection.commit()


if __name__ == "__main__":
    gkb.start_up()
